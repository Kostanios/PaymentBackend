import { Updater } from '../orderbook/Updater';
import { OrderBookSnapshot } from '../util/types/shared';
import { StreamClient } from '../websocket';
/**
 * Allows user to subscribe to an orderbook and recieve updates. StreamClient must be
 * connected to start getting updates.
 */
export declare class OrderBookWatcher {
    private streamClient;
    private snapshotUpdater;
    private marketID;
    private firstSync;
    private _inSync;
    /**
     * true if a snpshot has been retrieved and all of the latest deltas have been applied successfully
     */
    get inSync(): boolean;
    /**
     * @param marketID ID of market to montior orderbook
     * @param snapshotUpdater Updater to handle orderbook deltas and snapshots
     * @param streamClient StreamClient for OrderBookWatcher to subscribe to
     */
    constructor(marketID: number, snapshotUpdater: Updater, streamClient: StreamClient);
    /**
     * Unsubscribes from updates to the watched market from the supplied StreamClient,
     * clears all snapshot retrieval timeouts, and tears down all event listeners.
     * This should be called when the user is done with their live order book to avoid going over
     * their data limit.
     */
    destroy(): void;
    /**
     * Adds an event listener that triggers on each new update from an OrderBook snapshot and/or delta
     * @param callback function that is passed the marketID and latest OrderBookSnapshot as a parameter
     */
    onUpdate(callback: (marketID: number, orderBookSnapshot: OrderBookSnapshot) => void): void;
    /**
     * Adds an event listener that triggers the supplied callback any time the inSync status changes.
     * @param callback function that is passed the marketID and current inSync status
     */
    onSyncStatusChange(callback: (marketID: number, inSync: boolean) => void): void;
    /**
     * Adds an event listener that triggers the supplied callback on any error caught
     * @param callback function that is passed the marketID and the caught error
     */
    onError(callback: (marketID: number, error: Error) => void): void;
}
