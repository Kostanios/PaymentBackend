import { OrderBookDelta, OrderBookSnapshot, OrderBookState } from '../util/types/shared';
import { SnapshotRetriever } from './SnapshotRetriever';
/**
 * Internal class for handling orderbook update events and delta cache
 */
export declare class Updater {
    private currentOrderBook;
    private deltaCache;
    private get state();
    private firstSync;
    private inSync;
    private minDeltaNumber;
    private maxDeltaNumber;
    private fetchSnapshotTimer;
    private fetchSnapshotAttempt;
    private snapshotRetriever;
    private updaterEvents;
    constructor(snapshotRetriever: SnapshotRetriever);
    /**
     * Triggers event to add new delta to the cache and attempt to apply
     * it and any other cached deltas.
     * @param orderBookDelta delta obtained from StreamClient
     */
    applyDelta(orderBookDelta: OrderBookDelta): void;
    /**
     * Adds an event listener that triggers the supplied callback on each new update from an OrderBook snapshot and/or delta
     * @param callback function that is passed the latest OrderBookSnapshot as a parameter
     */
    onOrderBookUpdate(callback: (snapshot: OrderBookSnapshot) => void): void;
    /**
     * Adds an event listener that triggers the supplied callback on each change to the state of cached deltas and sync status
     * @param callback function that is passed the latest OrderBookState of cached deltas and sync status
     */
    onStateUpdate(callback: (state: OrderBookState) => void): void;
    /**
     * Adds an event listener that triggers the supplied callback on any error caught
     * @param callback function that is passed caught errors
     */
    onError(callback: (error: Error) => void): void;
    /**
     * Tears down all set timeouts and event listeners.
     */
    destroy(): void;
    private resetSnapshotTimer;
    private initializeEventHandlers;
    private scheduleSnapshotRetrieval;
    private onSnapshotRetrieved;
    private onSnapshotRetrievedError;
    /**
     * Triggered when a new delta comes in via the stream client. Adds new
     * deltas to the cache and attempts to apply them.
     * If the orderbook is out of sync, it will schedule a new snapshot retrieval in
     * an attempt to get back in sync.
     * @param delta new snapshot delta coming from streamClient
     */
    private onDeltaRetrieved;
    /**
     * Checks each cached delta and applies in order if still in sync
     * Resets snapshot timer if deltas are coming in correctly.
     */
    private applyCachedDeltas;
    private checkDeltas;
    private getSnapshotDelay;
}
