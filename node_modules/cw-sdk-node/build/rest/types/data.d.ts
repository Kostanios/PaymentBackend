declare type Description<T> = T & {
    routes: {
        [key: string]: string;
    };
};
declare type Brief<T> = T & {
    route: string;
};
declare type AssetBase = {
    id: number;
    symbol: string;
    name: string;
    fiat: boolean;
};
declare type ExchangeBase = {
    id: number;
    symbol: string;
    name: string;
    active: boolean;
};
declare type MarketBase = {
    id: number;
    exchange: string;
    pair: string;
    active: boolean;
};
export declare type AssetBrief = Brief<AssetBase>;
export declare type AssetDetails = AssetBase & {
    markets: {
        base: MarketBrief[];
        quote: MarketBrief[];
    };
};
export declare type PairBrief = {
    id: number;
    symbol: string;
    base: AssetBrief;
    quote: AssetBrief;
};
export declare type PairDetails = PairBrief & {
    markets: MarketBrief[];
};
export declare type ExchangeDescription = Description<ExchangeBase>;
export declare type ExchangeBrief = Brief<ExchangeBase>;
export declare type MarketDescription = Description<MarketBase>;
export declare type MarketBrief = Brief<MarketBase>;
export declare type Price = {
    price: number;
};
export declare type ChangeSummary = {
    percentage: number;
    absolute: number;
};
export declare type PriceSummary = {
    last: number;
    high: number;
    low: number;
    change: ChangeSummary;
};
export declare type Summary = {
    price: PriceSummary;
    volume: number;
    volumeQuote: number;
};
/**
 * PublicOrders are arrays of numbers in this order:
 * [ Price, Amount ]
 */
export declare type PublicOrderRaw = [number, number];
export declare type OrderBookSnapshotRaw = {
    asks: PublicOrderRaw[];
    bids: PublicOrderRaw[];
    seqNum: number;
};
/**
 * Trades are arrays of numbers in this order:
 * [ ID, Timestamp, Price, Amount ]
 */
export declare type TradeRaw = [number, number, number, number];
export declare type Trade = {
    id: number;
    timestamp: number;
    price: string;
    amount: string;
};
export declare type Period = '60' | '180' | '300' | '900' | '1800' | '3600' | '7200' | '14400' | '21600' | '43200' | '86400' | '259200' | '604800' | '604800_Monday';
export declare type PeriodNames = '1m' | '3m' | '5m' | '15m' | '30m' | '1h' | '2h' | '4h' | '6h' | '12h' | '1d' | '3d' | '1w_Thursday' | '1w_Monday';
export declare type LiquiditySide = {
    base: {
        [period in Period]: string;
    };
    quote: {
        [period in Period]: string;
    };
};
export declare type MarketOrderBookLiquidity = {
    bid: LiquiditySide;
    ask: LiquiditySide;
};
/**
 * CandleData is an array of numbers in this order:
 * [ CloseTime, OpenPrice, HighPrice, LowPrice, ClosePrice, Volume, QuoteVolume ]
 */
export declare type CandleDataRaw = [number, number, number, number, number, number, number];
export declare type CandleData = {
    closeTime: number;
    openPrice: string;
    highPrice: string;
    lowPrice: string;
    closePrice: string;
    volume: string;
    quoteVolume: string;
};
export declare type MarketOHLCRaw = {
    [period in Period]: CandleDataRaw[];
};
export declare type MarketOHLC = {
    [period in Period]: CandleData[];
};
export declare type Prices = {
    [marketSymbol: string]: number;
};
export declare type Summaries = {
    [marketSymbol: string]: Summary;
};
export declare type OHLCOptions = {
    before?: string;
    after?: string;
    periods?: string;
};
export {};
