import { ExchangeDescription, ExchangeBrief, MarketBrief, MarketDescription, Price, PairBrief, PairDetails, Summary, Summaries, Trade, MarketOHLC, OHLCOptions } from './types/data';
import { RESTOpts, RESTAllowance } from './types/client';
import { Market, Asset, OrderBookSnapshot, MarketSelector, MarketSymbol } from '../util/types/shared';
export declare class RESTClient {
    private apiKey?;
    private apiRoute?;
    private lastAllowance?;
    constructor(options?: RESTOpts);
    private getRestURL;
    private getRestData;
    /**
     * Returns the most recently retrieved REST allowance data.
     */
    getAllowance(): RESTAllowance;
    /**
     * Returns a list of all supported exchanges.
     * @see https://cryptowat.ch/docs/api#pairs-index
     */
    getExchanges(): Promise<ExchangeBrief[]>;
    /**
     * Returns a single exchange, with associated routes.
     * @param exchangeSymbol string (example: 'kraken')
     * @see https://cryptowat.ch/docs/api#exchange-details
     */
    getExchange(exchangeSymbol: string): Promise<ExchangeDescription>;
    /**
     * Returns all pairs (in no particular order).
     * @see https://cryptowat.ch/docs/api#pairs-index
     */
    getPairsIndex(): Promise<PairBrief[]>;
    /**
     * Returns a single pair. Lists all markets for this pair.
     * @param pairSymbol string (example: 'btcusd')
     * @see https://cryptowat.ch/docs/api#pair-details
     */
    getPair(pairSymbol: string): Promise<PairDetails>;
    /**
     * Returns a list of all supported markets.
     * @see https://cryptowat.ch/docs/api#market-index
     */
    getMarkets(): Promise<MarketBrief[]>;
    /**
     * Returns the market summary for all supported markets. Some values may be out of date by a few seconds.
     * @see https://cryptowat.ch/docs/api#summaries
     */
    getSummaries(): Promise<Summaries>;
    /**
     * Returns a single market summary.
     * @param exchangeSymbol string (Example: 'kraken')
     * @param pairSymbol string (Example: 'btcusd')
     * @see https://cryptowat.ch/docs/api#market-summary
     */
    getSummary(exchangeSymbol: string, pairSymbol: string): Promise<Summary>;
    /**
     * Returns a list of supported markets for a specific exchange.
     * @param exchangeSymbol string (Example: 'kraken')
     * @see https://cryptowat.ch/docs/api#market-index
     */
    getExchangeMarkets(exchangeSymbol: string): Promise<MarketDescription[]>;
    /**
     * Returns a single market, with associated routes.
     * @param exchangeSymbol string (Example: 'kraken')
     * @param pairSymbol string (Example: 'btcusd')
     * @see https://cryptowat.ch/docs/api#market-details
     */
    getMarketDescription(exchangeSymbol: string, pairSymbol: string): Promise<MarketDescription>;
    /**
     * Returns a single market.
     * @param marketSelector MarketSelector id of market (number) or MarketSymbol (Example: {exchange: 'kraken', base: 'btc', quote:'usd'})
     */
    getMarket(marketSelector: MarketSelector): Promise<Market>;
    /**
     * Returns a single market.
     * @param marketSymbol MarketSymbol (Example: {exchange: 'kraken', base: 'btc', quote:'usd'})
     */
    getMarketBySymbol(marketSymbol: MarketSymbol): Promise<Market>;
    /**
     * Returns a single market.
     * @param marketID number id of specific market.
     */
    getMarketByID(marketID: number): Promise<Market>;
    /**
     * Returns a single asset.
     * @param assetSelector number|string id of asset (number) or asset symbol (Example: 'btc')
     */
    getAsset(assetSelector: number | string): Promise<Asset>;
    /**
     * Returns a single asset, with associated routes.
     * @param assetSymbol string symbol for specific requested asset (Examples: 'btc', 'usd', 'eth', 'jpy', etc...)
     */
    getAssetBySymbol(assetSymbol: string): Promise<Asset>;
    /**
     * Returns a single market, with associated routes.
     * @param assetId number id of specific asset
     */
    getAssetByID(assetId: number): Promise<Asset>;
    /**
     * Returns a market's OHLC candlestick data.
     * @param exchangeSymbol string (Example: 'kraken')
     * @param pairSymbol string (Example: 'btcusd')
     * @param {OHLCOptions} options Optional - see API documentation
     * @see https://cryptowat.ch/docs/api#market-ohlc
     */
    getOHLC(exchangeSymbol: string, pairSymbol: string, options?: OHLCOptions): Promise<MarketOHLC>;
    /**
     * Returns a market's order book.
     * @param exchangeSymbol string (Example: 'kraken')
     * @param pairSymbol string (Example: 'btcusd')
     * @see https://cryptowat.ch/docs/api#market-orderbook
     */
    getOrderBookSnapshot(exchangeSymbol: string, pairSymbol: string): Promise<OrderBookSnapshot>;
    /**
     * Returns a market's last price.
     * @param exchangeSymbol string (Example: 'kraken')
     * @param pairSymbol string (Example: 'btcusd')
     * @see https://cryptowat.ch/docs/api#market-price
     */
    getPrice(exchangeSymbol: string, pairSymbol: string): Promise<Price>;
    /**
     * Returns a market's most recent trades, incrementing chronologically.
     * @param exchangeSymbol string (Example: 'kraken')
     * @param pairSymbol string (Example: 'btcusd')
     * @see https://cryptowat.ch/docs/api#market-trades
     */
    getTrades(exchangeSymbol: string, pairSymbol: string): Promise<Trade[]>;
}
