import { TradeOpts } from './types/client';
import { CancelOrderOpts, PlaceOrderOpt, PrivateOrder, PrivatePosition, PrivateTrade } from './types/trading';
import WebSocketClient from './WebSocketClient';
export declare class TradeClient extends WebSocketClient {
    orders: {
        [key: number]: PrivateOrder[];
    };
    trades: {
        [key: number]: PrivateTrade[];
    };
    positions: {
        [key: number]: PrivatePosition[];
    };
    private session;
    constructor(opts: Partial<TradeOpts>);
    onReady(fn: () => void): void;
    onOrdersUpdate(fn: (o: PrivateOrder[]) => void): void;
    onTradesUpdate(fn: (t: PrivateTrade[]) => void): void;
    onPositionsUpdate(fn: (p: PrivatePosition[]) => void): void;
    placeOrder(opts: Partial<PlaceOrderOpt>): Promise<PrivateOrder>;
    cancelOrder(opts: CancelOrderOpts): Promise<void>;
    private makeRequest;
    private brokerMessageHandler;
    private ordersUpdateHandler;
    private tradesUpdateHandler;
    private positionsUpdateHandler;
    private subscriptionResultHandler;
    private sessionStatusUpdateHandler;
    private requestResolutionUpdateHandler;
}
