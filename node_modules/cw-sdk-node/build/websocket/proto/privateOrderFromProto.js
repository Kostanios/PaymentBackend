"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.privateOrderFromProto = void 0;
const tslib_1 = require("tslib");
const helpers_1 = require("../../util/helpers");
const logger_1 = tslib_1.__importDefault(require("../../util/logger"));
const validators_1 = require("./validators");
const constants_1 = require("./constants");
function privateOrderFromProto(privateOrder) {
    if (!privateOrder.priceParams ||
        !privateOrder.amountParamString ||
        privateOrder.type == null ||
        !validators_1.validateOrderTypeProto(privateOrder.type) ||
        privateOrder.side == null ||
        !validators_1.validateOrderSideProto(privateOrder.side)) {
        logger_1.default.error('failed to parse private order %o', privateOrder);
        return null;
    }
    if (!Array.isArray(privateOrder.priceParams) ||
        privateOrder.priceParams.length < 1 ||
        !privateOrder.priceParams[0].valueString) {
        return null;
    }
    if (privateOrder.amountFilledString === '') {
        privateOrder.amountFilledString = '0.0';
    }
    let fundingType = 'spot';
    if (typeof privateOrder.fundingType === 'number') {
        fundingType = constants_1.fundingTypeFromProto[privateOrder.fundingType];
    }
    const id = privateOrder.id;
    if (id == null || id.length === 0) {
        return null;
    }
    if (privateOrder.time == null || privateOrder.time === 0) {
        return null;
    }
    const timestamp = helpers_1.getDateFromSecs(privateOrder.time);
    let expireTime;
    if (typeof privateOrder.expireTime === 'number' && privateOrder.expireTime > 0) {
        expireTime = helpers_1.getDateFromSecs(privateOrder.expireTime);
    }
    // let leverage = 0;
    // if (privateOrder.leverage) {
    //   leverage = parseFloat(privateOrder.leverage);
    // }
    // let currentStop;
    // if (privateOrder.currentStopString) {
    //   currentStop = privateOrder.currentStopString;
    // }
    // let initialStop;
    // if (privateOrder.initialStopString) {
    //   initialStop = privateOrder.initialStopString;
    // }
    return {
        price: privateOrder.priceParams[0].valueString,
        amount: privateOrder.amountParamString,
        side: constants_1.privateOrderSideFromProto[privateOrder.side],
        type: constants_1.orderTypeFromProto[privateOrder.type],
        fundingType,
        id,
        timestamp,
        expireTime,
        // leverage,
        // currentStop,
        // initialStop,
        amountFilled: privateOrder.amountFilledString || '0'
    };
}
exports.privateOrderFromProto = privateOrderFromProto;
//# sourceMappingURL=privateOrderFromProto.js.map