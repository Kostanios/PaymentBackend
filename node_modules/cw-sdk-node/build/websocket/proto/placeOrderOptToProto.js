"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.placeOrderOptToProto = void 0;
const proto_1 = require("../modules/proto");
const constants_1 = require("./constants");
const validators_1 = require("./validators");
function placeOrderOptToProto(orderOpts) {
    if (orderOpts.type == null || !validators_1.validateOrderType(orderOpts.type)) {
        throw new Error(`invalid order options: type=${orderOpts.type}`);
    }
    if (orderOpts.type === 'market' && orderOpts.price != null) {
        throw new Error('invalid market order option: price');
    }
    if ((orderOpts.type !== 'market' && orderOpts.price == null) ||
        (orderOpts.price != null && !validators_1.validateMonetaryValue(orderOpts.price))) {
        throw new Error(`invalid order options: price=${orderOpts.price}`);
    }
    if (orderOpts.amount == null || !validators_1.validateMonetaryValue(orderOpts.amount)) {
        throw new Error(`invalid order options: amount=${orderOpts.amount}`);
    }
    if (orderOpts.side == null || !validators_1.validateOrderSide(orderOpts.side)) {
        throw new Error(`invalid order options: side=${orderOpts.side}`);
    }
    const fundingType = 'spot';
    // if (typeof orderOpts.fundingType === "number") {
    //   fundingType = fundingTypeFromProto[orderOpts.fundingType];
    // }
    // const leverage: string | null = null;
    // if (orderOpts.leverage !== undefined) {
    //   leverage = orderOpts.leverage;
    // }
    // const expireTime: number | null = null;
    // if (orderOpts.expireTime !== undefined) {
    //   expireTime = orderOpts.expireTime.getTime();
    // }
    const priceParams = [
        {
            valueString: String(orderOpts.price),
            type: proto_1.ProtobufBroker.PrivateOrder.PriceParamType.AbsoluteValue
        }
    ];
    return {
        side: constants_1.privateOrderSideToProto[orderOpts.side],
        type: constants_1.orderTypeToProto[orderOpts.type],
        fundingType: constants_1.fundingTypeToProto[fundingType],
        priceParams,
        amountParamString: String(orderOpts.amount)
        // leverage,
        // expireTime
    };
}
exports.placeOrderOptToProto = placeOrderOptToProto;
//# sourceMappingURL=placeOrderOptToProto.js.map