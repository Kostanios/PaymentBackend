"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const modules = ['initialize', 'orderUpdates', 'tradeUpdates', 'positionUpdates'];
/**
 * This class is used to keep trading sessions organized, and emit a ready status when the client
 * can trade.
 */
class SessionTracker extends events_1.EventEmitter {
    constructor(tradeSubs) {
        super();
        this.ready = false;
        this.sessions = {};
        tradeSubs.forEach((ts) => {
            this.sessions[ts.marketID] = {
                orderUpdates: false,
                initialize: false,
                tradeUpdates: false,
                positionUpdates: false
            };
        });
    }
    isReady() {
        return this.ready;
    }
    setModuleReady(mID, m) {
        if (this.sessions[mID][m] === true) {
            return;
        }
        this.sessions[mID][m] = true;
        if (this.modulesReady()) {
            this.ready = true;
            this.emit('ready');
        }
    }
    isModuleReady(mID, m) {
        return this.sessions[mID][m];
    }
    reset() {
        for (const mID in this.sessions) {
            if (Object.prototype.hasOwnProperty.call(this.sessions, mID)) {
                this.sessions[mID] = {
                    initialize: false,
                    orderUpdates: false,
                    tradeUpdates: false,
                    positionUpdates: false
                };
            }
        }
        this.ready = false;
    }
    modulesReady() {
        for (const mID in this.sessions) {
            if (Object.prototype.hasOwnProperty.call(this.sessions, mID)) {
                for (const m of modules) {
                    if (this.sessions[mID][m] !== true) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
}
exports.default = SessionTracker;
//# sourceMappingURL=SessionTracker.js.map