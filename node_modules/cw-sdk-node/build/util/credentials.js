"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadRESTCredentials = exports.loadTradeCredentials = exports.loadStreamCredentials = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const js_yaml_1 = tslib_1.__importDefault(require("js-yaml"));
const os_1 = tslib_1.__importDefault(require("os"));
const path_1 = tslib_1.__importDefault(require("path"));
const logger_1 = tslib_1.__importDefault(require("../util/logger"));
const defaultCredsPath = path_1.default.join(os_1.default.homedir(), '.cw', 'credentials.yml');
const defaultStreamURL = 'wss://stream.cryptowat.ch';
const defaultTradeURL = 'wss://trading.service.cryptowat.ch';
const defaultRESTURL = 'https://api.cryptowat.ch';
/**
 * Credentials precedence:
 * 1. environment variables CW_API_KEY, CW_SECRET_KEY
 * 2. provided via constructor
 * 3. provided via credentials file ~/.cw/credentials.yml OR environment variable CW_CREDENTIALS
 */
function loadCredentials(creds, ctype) {
    if (process.env.CW_API_KEY && process.env.CW_SECRET_KEY) {
        creds.apiKey = process.env.CW_API_KEY;
        creds.secretKey = process.env.CW_SECRET_KEY;
        logger_1.default.debug('loaded credentials from CW_API_KEY and CW_SECRET_KEY');
        return;
    }
    if (creds.apiKey) {
        // apiKey (and secretKey, we assume) has been loaded via constructor
        logger_1.default.debug('loaded credentials from constructor');
        return;
    }
    // If nothing was passed via constructor, attempt to read a credentials file
    let credsPath = defaultCredsPath;
    if (process.env.CW_CREDENTIALS) {
        credsPath = path_1.default.resolve(process.env.CW_CREDENTIALS);
    }
    try {
        const credsFile = js_yaml_1.default.safeLoad(fs_1.default.readFileSync(credsPath, 'utf8'));
        creds.apiKey = credsFile.api_key;
        creds.secretKey = credsFile.secret_key;
        if (ctype === 'stream' && credsFile.stream_url) {
            creds.url = credsFile.stream_url;
        }
        else if (ctype === 'trade' && credsFile.trade_url) {
            creds.url = credsFile.trade_url;
        }
        else if (ctype === 'REST' && credsFile.REST_url) {
            creds.url = credsFile.REST_url;
        }
        logger_1.default.debug('loaded credentials file: %s' + credsPath);
    }
    catch (e) {
        logger_1.default.debug("couldn't find credentials file: %s" + credsPath);
    }
}
function loadStreamCredentials(opts) {
    if (!opts) {
        throw new Error('Missing stream options');
    }
    if (!opts.creds) {
        opts.creds = {
            apiKey: '',
            secretKey: '',
            url: defaultStreamURL
        };
    }
    if (!opts.creds.url) {
        opts.creds.url = defaultStreamURL;
    }
    loadCredentials(opts.creds, 'stream');
    // This assumes that opts is StreamOpts at this point. If it isn't,
    // it will result in a runtime error
    return opts;
}
exports.loadStreamCredentials = loadStreamCredentials;
function loadTradeCredentials(opts) {
    if (!opts) {
        throw new Error('Missing trade options');
    }
    if (!opts.creds) {
        opts.creds = {
            apiKey: '',
            secretKey: '',
            url: defaultTradeURL
        };
    }
    if (!opts.creds.url) {
        opts.creds.url = defaultTradeURL;
    }
    loadCredentials(opts.creds, 'trade');
    // This assumes that opts is valid TradeOpts at this point. If it isn't,
    // it will result in a runtime error
    return opts;
}
exports.loadTradeCredentials = loadTradeCredentials;
function loadRESTCredentials(opts) {
    if (!opts) {
        opts = {};
    }
    const creds = Object.assign({ secretKey: '', apiKey: '', url: defaultRESTURL }, opts.creds);
    loadCredentials(creds, 'REST');
    // This assumes that opts is valid RESTOpts at this point. If it isn't,
    // it will result in a runtime error
    return { creds };
}
exports.loadRESTCredentials = loadRESTCredentials;
//# sourceMappingURL=credentials.js.map